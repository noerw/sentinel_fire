#!/usr/bin/env python2

import logging
import argparse
from os import path, walk, listdir, system
import re
from subprocess import Popen, PIPE

import geojson
from sentinelsat.sentinel import SentinelAPI, geojson_to_wkt

# log to stderr. stdout is used for pipe communications!
logger = logging.getLogger()
logger.setLevel(logging.WARN)
logger.addHandler(logging.StreamHandler())

parser = argparse.ArgumentParser()
parser.add_argument("--aoi", help="area of interest as geojson string", default='./')
parser.add_argument("--input", help="directory containing the SAFE tiles to process", default='./')
parser.add_argument("--output", help="directory containing the resulting stitched TIF", default='./')
args = parser.parse_args()

aoi = geojson_to_wkt(geojson.loads(args.aoi))

def checkJp2(filePath):
    ''' decides if a jp2 file should be used for a composite
    '''
    # TODO check if ordering of file inputs is always the samej
    BANDS_TO_KEEP = [
        'B01_60m.jp2',
        'B02_20m.jp2',
        'B03_20m.jp2',
        'B04_20m.jp2',
        'B05_20m.jp2',
        'B06_20m.jp2',
        'B07_20m.jp2',
        'B8A_20m.jp2',
        'B09_60m.jp2',
        'B10_60m.jp2',
        'B11_20m.jp2',
        'B12_20m.jp2',
    ]

    for k in BANDS_TO_KEEP:
        if filePath.endswith(k):
            return True

    return False

def listDirectory(directory, listType = 'file', recursive = True):
    if recursive:
        dirs = [d for d in walk(directory)]
    else:
        dirs = [walk(directory).next()]

    listType = 1 if listType == 'dir' else 2
    return [path.join(folder[0], sub) for folder in dirs for sub in folder[listType]]

def callGdal(args):
    # TODO: error handling
    output = Popen('gdalbuildvrt {}'.format(args).split(' '), stdout=PIPE)
    std, stderr = output.communicate()
    if std: logger.warn(std)
    if stderr: logger.warn(stderr)

# find L2A dirs
l2aDirs = []
for directory in listDirectory(args.input, listType = 'dir', recursive = False):
    if re.match('.*MSIL2A.*', directory):
        l2aDirs.append(directory)

# group L2A dirs by orbit TODO
orbits = [
    ('20181212', l2aDirs)
]

for date, tiles in orbits:
    # find all .jp2 files within the L2A matching dirs
    for tile in tiles:
        jp2Files = []
        for file in listDirectory(tile):
            if re.match('.*IMG_DATA.*\.jp2$', file):
                if checkJp2(file):
                    jp2Files.append(file)

        # build VRT for each tile via gdal_build_vrt
        callGdal('-separate {} {}'.format(
            '{}.vrt'.format(tile),
            ' '.join(jp2Files) # DANGER: spaces in filepath not allowed
        ))

    # stitch/merge the tiles via gdal_build_vrt (no -separate!)
    # callGdal('{} {}')

    # clip to aoi, output the resulting TIF
    # filename should be 'preprocessed_{}.tif'.format(productDate)
