#!/bin/bash

# arguments: <INDIR> <OUTDIR> <INPUTDATE yyyy-mm-dd> e.g ~/sentinel2/myanmar ~/Data/ChangeDetection 2017-05-05

# all outputs can be found in /OUTDIR/log.txt
# creates a .tiff named INDIR_INPUTDATE.tiff
# also returns the path to that .tiff file in console

# [ ] weird error while creating the tiff: "Warning 1: Unable to export GeoTIFF file with different datatypes per different bands. All bands should have the same types in TIFF."
#     but works anyway

# check whether enough arguments given
if [ "$3" = "" ]
then echo "not enough arguments given"
     echo "usage : <INDIR> <OUTDIR> <INPUTDATE YYYY-MM-DD>"
exit
fi

INDIR=$1
OUTDIR=$2
INPUTDATE=$3

# function that searches INDIR for valid tiles
checkfolder () {
  IN=$(date -d $1)
  PLUS=$(date -d "$1+1 days")
  MINUS=$(date -d "$1-1 days")
  # extract date from folder
  PRODUCTLIST=`find $2 -name "*L2A*" -path "*.SAFE"`
  for PRODUCT in $PRODUCTLIST
  do
  NAME=$(basename ${PRODUCT})
  DATE=`date -d ${NAME:11:8}`
  if [ "$DATE" = "$PLUS" ] || [ "$DATE" = "$MINUS" ] || [ "$DATE" = "$IN" ]
  then echo $PRODUCT
  fi
  done
}

# check whether input directories & date exist
if [ ! -d "$INDIR" ]
 then echo "input directory doesn't exist!"
  exit
fi

if [ ! -d "$OUTDIR" ]
 then echo "output directory doesn't exist!"
  exit
fi

if [ ! "`date '+%Y-%m-%d' -d $INPUTDATE 2>/dev/null`" = "$INPUTDATE" ]
 then echo "$INPUTDATE is not a valid YYYY-MM-DD date"
  exit
fi

# make sure OUTDIR doesn't have an appended '/'
OUTDIR=${OUTDIR%/}

# create log file (currently one per directory, not unique)
log=$OUTDIR/log.txt
touch $log
timestamp=$(date +%Y%m%d_%H%M%S)
echo "###script started with INDIR = $INDIR & OUTDIR = $OUTDIR; timestamp: $timestamp" 1>> $log 2>> $log

# create vrtlist to save vrt we need to clip
vrtlist=$OUTDIR/vrt_$timestamp.txt
touch $vrtlist

# call checkfolder to create list of tiles with matching date +-1 day
TILELIST=`checkfolder $INPUTDATE $INDIR` 1>> $log 2>> $log

# if TILELIST isn't empty
if [ "$TILELIST" != "" ]
 then l2a_tiles=$TILELIST
else echo "no matching tiles for that date ($INPUTDATE) found" 1>> $log 2>> $log
 exit
fi

# for every tile, do
for tile in $l2a_tiles
do
tilename=$(basename ${tile})
outtilename=$OUTDIR/$tilename
echo "-working on $tilename" >> $log

# filter for bands that we need
# bandlist is empty when folder doesn't contain an IMG_DATA directory
bandlist=`find $tile -path '*IMG_DATA*.jp2' -type f ! -name *AOT* ! -name *WVP* ! -name *TCP* ! -name *TCI_20* ! -name *TCI_60* ! -name *SCL* ! -name *B02_20* ! -name *B03_20* ! -name *B04_20* ! -name *B02_60* ! -name *B03_60* ! -name *B04_60* ! -name *B05_60* ! -name *B06_60* ! -name *B07_60* ! -name *B09_60* ! -name *B11_60* ! -name *B12_60* ! -name *B8A_60* | sort`

# build vrt for every tile, write name to $vrtlist for clipping function
gdalbuildvrt -separate -resolution highest -overwrite $outtilename.vrt $bandlist 1>> $log 2>> $log
echo $outtilename.vrt >> $vrtlist
done
echo "done with tiles" >> $log

# clip all tiles together
echo "starting clipping" >> $log
TIFFNAME=`date '+%Y-%m-%d' -d $INPUTDATE 2>/dev/null`
gdalbuildvrt -resolution highest -input_file_list $vrtlist -overwrite $OUTDIR/$(basename ${INDIR})_$TIFFNAME.vrt 1>> $log 2>> $log

# output tiff is named inputfolder_inputdate.tiff
gdal_translate -of GTiff $OUTDIR/$(basename ${INDIR})_$TIFFNAME.vrt $OUTDIR/$(basename ${INDIR})_$TIFFNAME.tiff 1>> $log 2>> $log
echo done >> $log
echo "" >> $log
echo `find $OUTDIR -name "$(basename ${INDIR})_$TIFFNAME.tiff"`
# delete vrtlist
rm $vrtlist
